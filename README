sp/README   Tom Ace  crux@qnet.com   20 May 1999


This README file contains installation instructions and other notes for 
'sp', a program for adjusting the shape of a 7-sided toroidal polyhedron 
(discovered in 1977 by Lajos Szilassi).  Postscript face patterns for a 
few sample instances of the polyhedron are included in this distribution.

I wrote the program to let me adjust the angles and proportions of the 
polyhedron in preparation for making a model out of wood.  As it was
written for my own use it has a somewhat crude user interface, but it's 
not too painful.  

This distribution contains C++ source code.  A Makefile is provided, 
although you may need to add library paths to it.  The program was 
developed on Linux and Sun Sparcstation machines running the X Window 
graphics system.  I used gcc, although it's written in standard C++ 
and shouldn't cause problems for other compilers.  Porting to another 
X/Unix environment should be fairly easy.  Porting to Windoze or some 
other graphics system would take a bit more ambition (although most 
of the work should be limited to revamping graphics.h and graphics.cc).
If you're having trouble compiling/linking the code, contact me and
I may be able to help you out.


Files in this distribution:

README                       you're reading it
*.h, *.c, *.cc, Makefile     source code
polys/*                      directory with sample polyhedra (vertex coords)
ps/*                         directory with sample polyhedra (Postscript)

If you can't compile and link the program, the only files here that are 
likely to be of interest to you are the Postscript files in the directory ps.  
They print patterns for the polyhedron's seven faces on letter size paper.  
The vertex coordinates in the files in the polys directory may be of 
interest as well.


Notes on Postscript files:

The face pattern files generated by this program use standard Adobe Postscript
and should print fine on any Postscript printer that uses letter sized or
larger paper.  Each face is a hexagon, filled in gray.  If you are using the 
patterns to make a model out of paper or thin cardboard, cut the patterns out 
along the edges of the gray hexagons.  If the patterns were generated after
having invoked the SETT (set thickness) command, there will be additional 
lines parallel to the edges.  These lines indicate where the inside of 
another face would intersect the face; they are useful when making faces 
out of wood or any other material with nontrivial thickness.  If you're 
making a model out of paper, the extra lines can be safely ignored.  

When making a model out of paper stock too heavy to feed through a printer, 
my favorite method of transferring the face patterns is to lay them over 
the heavier paper, stick a pin through each vertex, and then use a 
straightedge to connect the pinholes.  

I apologize to users outside of the USA for the inch measurements used in 
the program.


Notes on the Szilassi polyhedron:

In 1977, the Hungarian mathematician Lajos Szilassi found a way to construct
a toroidal heptahedron. Each face of his polyhedron is a hexagon (although
none of them is a regular hexagon).

The Szilassi polyhedron shares with the tetrahedron the property that each
of its faces touches all the other faces. A tetrahedron demonstrates that
four colors are necessary for a map on a surface topologically equivalent to
a sphere; the Szilassi polyhedron demonstrates that seven colors are
necessary for a map on a surface topologically equivalent to a torus.
(Neither demonstrates anything about how many colors are sufficient.)

The vital statistics of the two polyhedra are as follows:

     tetrahedron       4 faces   4 vertices   6 edges   0 holes

 Szilassi polyhedron   7 faces  14 vertices   21 edges   1 hole

What other kinds of polyhedra could have the property that each pair of
faces shares an edge? Maybe none.

Euler's formula f + v - e = 2 is easily generalized for polyhedra with
holes; if h is the number of holes, f + v - e = 2 - 2*h.

In a polyhedron every pair of whose faces shares an edge, f and e are
related by the equation e = f * (f - 1) / 2.

Each vertex must be at the intersection of three edges. (If there were more
than three, some pairs of faces couldn't share an edge.) Thus, as each edge
connects two vertices, v = e * 2 / 3.

Combining the above equations and simplifying gives

h = (f*f - 7*f + 12) / 12

which can be factored as

h = (f - 4) * (f - 3) / 12

. Only certain values of f yield whole numbers of holes. f=4 applies to the
tetrahedron; f=7 applies to the Szilassi polyhedron. The next value of f
that yields a whole value for h is 12, which would apply to a polyhedron
with 12 faces, 66 edges, 44 vertices, and 6 holes. That configuration
doesn't sound workable to me; higher values of f and h seem even less
likely. Obviously I'm a bit short of a proof, but you get the picture.

Szilassi gave a set of equations that describe a particular instance of a
7-sided toroidal polyhedron; Martin Gardner reproduced patterns for the
faces (in the context of an entertaining discussion about math and
minimalist art) in his Mathematical Games column in Scientific American
(Nov. 1978). Szilassi's seven faces, in their original shapes, are also
illustrated below.

There is a dual to the Szilassi polyhedron. It was discovered in the late
1940s by Ákos Császár and has 14 triangular faces, 7 vertices, 21 edges, and
one hole. Patterns for a model of the Császár polyhedron can be found in
Martin Gardner's column in the May 1975 Scientific American. (The math above
was adapted from Gardner's description of Donald W. Crowe's analysis of the
relationships among f, v, e, and h in the Császár polyhedron.)

If you're thinking of making a wood model of the Szilassi polyhedron,
I can tell you about my experience doing this and offer hints that might 
save you a little time.  My email address is at the end of this file.


Notes on the program:

I started writing this program before I had seen Szilassi's equations or
conventions for face labeling.  Thus, I label the seven faces with seven 
letters (A,B,C,D,E,F,G) in a way that may not match anyone else's.  The 
letters I assigned to the seven faces are noted in the program's graphic 
display and in its Postscript face pattern output.

Many of the program's commands require references to individual vertices.
Each vertex is identified by the letters of the three faces that come 
together at the vertex.  The 14 vertices are as follows:

ABC, ABD, ACG, ADF, AEF, AEG, BCE, BDG, BEF, BFG, CDE, CDF, CFG, DEG.

When specifying a vertex to the program, the letters for the three faces
may be given in any order.  E.g., for the first vertex, the program will 
recognize CAB or any other permutation.  When using the program, it's 
useful to have a paper or cardboard model of the polyhedron on hand with 
the faces labeled.  

If you've succeeded in compiling and linking the program, you should see 
a window labeled 'Polyhedron' when you start the program up.  The program 
will prompt you for a command with the line "poly  0:" (the number in the 
prompt advances for each adjustment you make to the polyhedron).  All 
commands are entered as text; the program doesn't recognize any mouse input.

The program maintains and displays its current version of the polyhedron.
The program starts up with a polyhedron that follows Szilassi's description
as given in the book _Adventures Among The Toroids_ by B. M. Stewart (revised 
second edition, 1980, ISBN 0-686-11936-3).  Various commands are provided for
altering the shape of the polyhedron.  Some of the commands will preserve
the integrity of the polyhedron; some may not.  For example, there's a 
scale command that compresses or expands the polyhedron along a specified
axis; scaling a legal polyhedron will always give a legal result.

A 'move vertex' command allows any individual vertex to be nudged in any 
direction; that command immediately ruins the polyhedron by pushing the 
vertex off of the planes it lies on.  A 'planify' command is provided to
restore the polyhedron's integrity by adjusting the locations of other 
vertices.  (By 'other vertices', I mean vertices that weren't moved out
of place with move vertex commands.)  This may sound complicated, but
it's not that hard to use in practice.

For ease of use, the user interface allows you to view and manipulate the 
polyhedron without referring to axes or coordinates.  

All commands may be entered in any case (upper, lower, mixed), although 
upper case is used for command examples in this document.  The commands 
(starting with the most commonly used ones) are:

DF and D3:
   The graphics window shows either the seven faces, or a perspective
   rendering of the complete polyhedron.  DF requests that the seven
   faces be displayed; D3 requests the 3-D perspective display.

ERA, ERB, AN:
   These commands affect the 3-D perspective display.  The program maintains
   an 'eye' location, i.e. the vantage point from which the perspective 
   rendering is generated.  ERA, ERB, and AN move the eye around, so that
   the polyhedron can be seen from different vantage points.  ERA and ERB
   ('eye relocate A' and 'eye relocate B') change the eye position, using
   two different methods.  AN ('animate') continually nudges the eye position 
   around a circular path (once per second) until stopped with control-C.  

MV v1 v2-v3 [p]
   MV moves vertex v1 in the direction v2->v3.  For example, MV ABC ABC-ABD
   moves vertex ABC a little closer to ABD, and MV BDG AEF-CDE moves vertex
   BDG a little bit in the direction of a ray starting at AEF and passing 
   through CDE.  How far is 'a little bit'?  Try it and see.  I find that
   the seven-faces display (selected by the DF command) is better than the
   3-D display for watching the effects of moving vertices around.  Once
   you get used to how much the MV command moves a vertex, you can alter
   the amount by adding a percentage to the command.  For example, 
   MV ABC ABC-ABD 50 moves ABC one half the distance that the command
   would if the 50 had been omitted.  The percentage must be an integer,
   and percentages over 100 are allowed.  The way that directions are
   specified (the v1-v2 syntax) limits the number of directions that can
   be selected, but in practice that isn't a big problem.  

PL
   PL "planifies" the polyhedron.  Use it after one (or more) MV commands
   to restore the flatness of the polyhedron's faces.  PL performs an 
   iterative refinement, repeatedly moving individual vertices by small 
   amounts, which can take a perceptible time.  It knows which vertices 
   have been moved (with MV commands) and leaves them alone.
   Although PL leaves the polyhedron with flat faces, it doesn't necessarily
   leave a 'legal' polyhedron behind.  After MV and/or PL, edges may cross 
   that shouldn't; it's up to the user to notice this--which is easy when
   the seven-faces display is selected with the DF command.

   PL stops iterating when the polyhedron's faces are 'reasonably' flat.  
   Additional refinement may be specified with a parameter; PL 10, for 
   example, makes the faces very flat indeed.  PL 4 is the default flatness 
   that you get when you type PL without any parameter.  PL 4 is suitable 
   for visual inspection while running the program; PL 10 should be used 
   before before printing Postscript face patterns (with the PRINT command),
   as high precision is required to get usable patterns.  The only reason 
   PL 10 is not the default is that it can take an annoying amount of time 
   on slower machines.

SCALE n v1-v2   
   SCALE does what the name suggests.  For example, SCALE 50 ABC-ABD will 
   transform the coordinates of the polyhedron, squashing it to half its size 
   along the axis parallel to edge AB.  The percentage must be an integer, 
   and values above 100 are allowed.

SCALE n v1-v2 v3-v4
   Sometimes you have an axis you want to scale along, and you can't find 
   two vertices on a line parallel to your desired axis.  In those cases,
   this command offers another method.  It scales along an axis perpendicular
   to both v1-v2 and v3-v4.  For example, SCALE 110 ABC-ABD EFA-EFB scales
   the polyhedron by 110% along an axis perpendicular to both edges AB and EF.

PRINT filename
   Generates Postscript patterns for the seven faces, printable on letter
   sized (8.5" x 11") paper.  The PRINT command requires a filename 
   parameter; it creates the file in the directory "ps".  (Make sure the
   directory exists and you have write permission.)  It scales the faces 
   to as large a size as will fit on the paper, leaving a reasonable margin.
   Each face is a hexagon, filled in gray.  If you are using the patterns to 
   make a model out of paper or thin cardboard, cut the patterns out along 
   the edges of the gray hexagons.  If the SETT command has been invoked,
   there will be additional lines parallel to the edges.  These lines 
   indicate where the inside of another (thick) face would intersect 
   the face; they are only of possible use when using a material of 
   nontrivial thickness.  Ignore them otherwise.  One more thing:  if 
   the faces aren't flat enough, PRINT will insist that you flatten them 
   (with PL 10) before printing.

SETT mils
   Sets material thickness in mils (thousandths of an inch).  For example,
   use SETT 250 if you're making faces from quarter-inch thick material.  The
   thickness specification doesn't affect the graphic display; the only thing
   it has any effect on at all is the Postscript face patterns generated by
   the PRINT command.

S 
   Prints the polyhedron's status, including dihedral angles and deviation
   from flatness (induced by MV commands, and corrected by the PL command).
   Deviation from flatness is measured in some arbitrary unnamed unit.

WR filename   and    RD filename
   WR writes the vertex coordinates to a file; RD reads vertex coordinates 
   from a file (specifically, a file previously written by a WR command).  
   Both commands take a filename parameter, and the files are maintained in 
   a directory "polys" (make sure the directory exists and you have write 
   permission).  The files written by WR have a few comment lines (which 
   start with the % character).  Although WR writes the vertices in decimal, 
   RD's parser is primitive--so stick to the exact format of the program-
   generated files if you want to try editing them by hand.

RV n
   Reverts to a previous version of the polyhedron, specifically to the 
   one current when the program's prompt showed the number n.  It's useful 
   after you make changes that you don't like.

QUIT
   Causes the program to exit.

Z and ZSAVE
   Z randomly alters the polyhedron.  It makes a random change to the 
   equations for the seven planes, then checks for a 'legal' polyhedron.
   If the result is bogus, it keeps trying until a good one is found.
   Control-C will interrupt its search.  Unless a ZSAVE command has been
   invoked, it uses the stock polyhedron (Szilassi's formulae) for its 
   starting point.  The ZSAVE command causes the current polyhedron to be 
   stored as the starting polyhedron for subsequent Z commands.  Z can be 
   used with up to three optional parameters.
      Z s n l    works as follows:
   s specifies a 'strictness' in percentage of default strictness;
   n specifies a coefficient for faces' normal vector adjustment (default 5);
   l specifies a coefficient for faces' position adjustment (default 5).
   I won't ruin your fun by giving away the detailed meanings of the parameters.

EYE 
   This is the only command that makes reference to (x,y,z) coordinates.
   When invoked without any parameters, it reports the current eye position.
   When invoked with three parameters (x y z, integers separated by spaces),
   it sets the current eye position.  ERA, ERB, and AN are all the eye
   manipulation commands you'll need for most purposes; you don't have to 
   bother with EYE.

HELP
   Prints a short command summary.


That's about it.  There are a few other commands that I haven't documented,
but you're not missing much--they're not very exciting.  

The program is not 100% reliable.  You may encounter some bugs.  Save
any particularly desirable polyhedra with the WR command before invoking
other commands.

Comments of all kinds are especially welcome; please send to:

Tom Ace
crux@qnet.com

